<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CODE on ZeroToOne</title><link>https://0t1.me/categories/code/</link><description>Recent content in CODE on ZeroToOne</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 04 Aug 2025 22:07:43 +0200</lastBuildDate><atom:link href="https://0t1.me/categories/code/rss.xml" rel="self" type="application/rss+xml"/><item><title>Enforce adherence of derived classes to parent signatures in Python</title><link>https://0t1.me/blog/2023/12/21/enforce-adherence-of-derived-classes-to-parent-signatures-in-python/</link><pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate><guid>https://0t1.me/blog/2023/12/21/enforce-adherence-of-derived-classes-to-parent-signatures-in-python/</guid><description>&lt;p&gt;When we&amp;rsquo;re developing an object oriented systems in Python, there are often instances where we have to create &lt;a href="https://en.wikipedia.org/wiki/Abstract_type"&gt;abstract classes&lt;/a&gt;.
These classes define a basic structure that we expect other parts of the code to implement.
or instance, in the context of databases, we create an abstract class that contains fundamental structure for a database class.
The derived classes then need to implement the abstract methods to form a complete structure.
The challenge arises when a derived class doesn&amp;rsquo;t follow the expected signature of the abstract class.&lt;/p&gt;</description></item></channel></rss>